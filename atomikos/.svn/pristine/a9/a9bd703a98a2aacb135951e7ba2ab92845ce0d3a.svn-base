package com.mcnc.mbanking.auth.util;

import java.math.BigInteger;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Security;
import java.security.SignatureException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.Date;

import org.bouncycastle.asn1.ASN1ObjectIdentifier;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.x500.X500Name;
import org.bouncycastle.asn1.x500.X500NameBuilder;
import org.bouncycastle.asn1.x500.style.BCStyle;
import org.bouncycastle.asn1.x509.GeneralName;
import org.bouncycastle.asn1.x509.GeneralNames;
import org.bouncycastle.asn1.x509.KeyPurposeId;
import org.bouncycastle.cert.CertIOException;
import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;
import org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder;
import org.bouncycastle.jce.X509KeyUsage;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.operator.ContentSigner;
import org.bouncycastle.operator.OperatorCreationException;
import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;
import org.springframework.util.Assert;

import com.mcnc.mbanking.auth.domain.PairKeyAuthentication;

public abstract class CertificateUtils {
	
	private static final String BC = BouncyCastleProvider.PROVIDER_NAME;
	
	static {
		Security.addProvider(new BouncyCastleProvider());
	}
	
	private static X500NameBuilder createStdBuilder() {
		X500NameBuilder builder = new X500NameBuilder(BCStyle.INSTANCE);

		builder.addRDN(BCStyle.C, "KH");
		builder.addRDN(BCStyle.O, "PPCB OTP");
		builder.addRDN(BCStyle.L, "PP");
		builder.addRDN(BCStyle.ST, "PP");
		builder.addRDN(BCStyle.E, "seakleng@mcnc.co.kr");

		return builder;
	}


	/**
	 * Generate Certificate's byte content from {@link PairKeyAuthentication}
	 * 
	 * @param pairKey
	 * @return
	 * @throws OperatorCreationException
	 * @throws CertIOException
	 * @throws InvalidKeyException
	 * @throws CertificateException
	 * @throws NoSuchAlgorithmException
	 * @throws NoSuchProviderException
	 * @throws SignatureException
	 */
	public static byte[] generateCertificate(PairKeyAuthentication pairKey) throws OperatorCreationException, 
			CertIOException, InvalidKeyException, CertificateException, NoSuchAlgorithmException, 
			NoSuchProviderException, SignatureException {
		
		Assert.notNull(pairKey.getPrivateKey(), "Private Key cannot be null");
		Assert.notNull(pairKey.getPublicKey(), "Public Key cannot be null");
		Assert.notNull(pairKey.getSalt(), "Salt cannot be null");
		
		
		PublicKey publicKey = PairKeyAuthenticationUtils.readPublicKey(pairKey);
		PrivateKey privateKey = PairKeyAuthenticationUtils.readPrivateKey(pairKey);
		
		//
        // distinguished name table.
        //
        X500Name name = createStdBuilder().build();
        
        //
        // create base certificate - version 3
        //
        ContentSigner sigGen = new JcaContentSignerBuilder("SHA256WithRSAEncryption").setProvider(BC)
        		.build(privateKey);
        JcaX509v3CertificateBuilder  certGen = new JcaX509v3CertificateBuilder(name, BigInteger.valueOf(1),
        		new Date(), new Date(System.currentTimeMillis() + 600000),
        		name, publicKey);

        certGen.addExtension(new ASN1ObjectIdentifier("2.5.29.15"), true,
            new X509KeyUsage(X509KeyUsage.encipherOnly));
        certGen.addExtension(new ASN1ObjectIdentifier("2.5.29.37"), true,
            new DERSequence(KeyPurposeId.anyExtendedKeyUsage));
        certGen.addExtension(new ASN1ObjectIdentifier("2.5.29.17"), true,
            new GeneralNames(new GeneralName(GeneralName.rfc822Name, "MCNC")));

        X509Certificate baseCert = new JcaX509CertificateConverter().setProvider(BC).getCertificate(certGen.build(sigGen));

        baseCert.verify(publicKey);
        
        return baseCert.getEncoded();
	}
}
